{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleFilter","value","onChange","PersonForm","props","onSubmit","addPerson","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","persons","deletePerson","person","name","toLowerCase","includes","map","key","id","number","onClick","Notification","message","text","className","baseUrl","axios","get","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","then","response","data","event","target","preventDefault","existingPerson","find","p","newPerson","window","confirm","setTimeout","concat","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qMAeeA,EAbA,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,aAEvB,OACE,kDAEE,2BACEC,MAAOF,EACPG,SAAUF,MCiBHG,EAxBI,SAACC,GAClB,OACE,0BAAMC,SAAUD,EAAME,WACpB,qCAEE,2BACEL,MAAOG,EAAMG,QACbL,SAAUE,EAAMI,oBAGpB,uCAEE,2BACEP,MAAOG,EAAMK,UACbP,SAAUE,EAAMM,sBAGpB,6BACE,4BAAQC,KAAK,UAAb,UCAOC,EAlBC,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASd,EAA0B,EAA1BA,OAAQe,EAAkB,EAAlBA,aAMjC,OAJqBD,EAAQd,QAAO,SAAAgB,GAClC,OAAOA,EAAOC,KAAKC,cAAcC,SAASnB,EAAOkB,kBAG/BE,KAAI,SAAAJ,GACtB,OACE,yBAAKK,IAAKL,EAAOM,IACf,uBAAGD,IAAKL,EAAOC,MACZD,EAAOC,KADV,IACiBD,EAAOO,OACtB,4BAAQC,QAAS,kBAAMT,EAAaC,KAApC,gBCCKS,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAqB,OAAjBA,EAAQC,KACH,KAIP,yBAAKC,UAAWF,EAAQd,MACrBc,EAAQC,O,gBCRTE,EAAU,eAkBD,EAhBA,WACb,OAAOC,IAAMC,IAAIF,IAeJ,EAZA,SAAAG,GACb,OAAOF,IAAMG,KAAKJ,EAASG,IAWd,EARA,SAACV,EAAIZ,GAClB,OAAOoB,IAAMI,IAAN,UAAaL,EAAb,YAAwBP,GAAMZ,IAOxB,EAJM,SAAAY,GACnB,OAAOQ,IAAMK,OAAN,UAAgBN,EAAhB,YAA2BP,KCiHrBc,EAzHH,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTvB,EADS,KACAwB,EADA,OAEcD,mBAAS,IAFvB,mBAET7B,EAFS,KAEA+B,EAFA,OAGkBF,mBAAS,IAH3B,mBAGT3B,EAHS,KAGE8B,EAHF,OAIYH,mBAAS,IAJrB,mBAITrC,EAJS,KAIDyC,EAJC,OAKcJ,mBAAS,IALvB,mBAKTX,EALS,KAKAgB,EALA,KA+FhB,OARAC,qBAAU,WACRC,IAEGC,MAAK,SAAAC,GACJR,EAAWQ,EAASC,WAEvB,IAGD,6BACE,yCACA,kBAAC,EAAD,CAAcrB,QAASA,IACvB,kBAAC,EAAD,CACE1B,OAAQA,EACRC,aAlBe,SAAC+C,GACpBP,EAAUO,EAAMC,OAAO/C,UAmBrB,yCACA,kBAAC,EAAD,CACEK,UAlGY,SAACyC,GACjBA,EAAME,iBACN,IAAMC,EAAiBrC,EAAQsC,MAAK,SAAAC,GAAC,OAAI7C,IAAY6C,EAAEpC,QACjDqC,EAAY,CAChBrC,KAAMT,EACNe,OAAQb,GAENyC,EACCI,OAAOC,QAAP,UAAkBhD,EAAlB,2EACDoC,EACUO,EAAe7B,GAAIgC,GAC1BT,MAAK,SAAAC,GACJJ,EAAW,CACT9B,KAAM,UACNe,KAAK,WAAD,OAAa2B,EAAUrC,QAE7BwC,YAAW,WACTf,EAAW,MACV,KACHJ,EAAWxB,EAAQM,KAAI,SAAAiC,GAAC,OAAIA,EAAE/B,KAAO6B,EAAe7B,GAAK+B,EAAIP,EAASC,SACtER,EAAW,IACXC,EAAa,OAKrBI,EACUU,GACPT,MAAK,SAAAC,GACJJ,EAAW,CACT9B,KAAM,UACNe,KAAK,SAAD,OAAW2B,EAAUrC,QAE3BwC,YAAW,WACTf,EAAW,MACV,KACHJ,EAAWxB,EAAQ4C,OAAOZ,EAASC,OACnCR,EAAW,IACXC,EAAa,QA6DbhC,QAASA,EACTC,iBAhCmB,SAACuC,GACxBT,EAAWS,EAAMC,OAAO/C,QAgCpBQ,UAAWA,EACXC,mBA9BqB,SAACqC,GAC1BR,EAAaQ,EAAMC,OAAO/C,UA+BxB,uCACA,kBAAC,EAAD,CACEY,QAASA,EACTd,OAAQA,EACRe,aAlEe,SAACC,GACjBuC,OAAOC,QAAP,iBAAyBxC,EAAOC,KAAhC,QACD2B,EAA2B5B,EAAOM,IAC/BuB,MAAK,SAAAC,GACJJ,EAAW,CACT9B,KAAM,UACNe,KAAK,GAAD,OAAKX,EAAOC,KAAZ,cAENwC,YAAW,WACTf,EAAW,MACV,KACHJ,EAAWxB,EAAQd,QAAO,SAAAqD,GAAC,OAAIA,EAAE/B,KAAON,EAAOM,UAEhDqC,OAAM,SAAAC,GACLlB,EAAW,CACT9B,KAAM,QACNe,KAAK,kBAAD,OAAoBX,EAAOC,KAA3B,2CAENwC,YAAW,WACTf,EAAW,MACV,KACHJ,EAAWxB,EAAQd,QAAO,SAAAqD,GAAC,OAAIA,EAAE/B,KAAON,EAAOM,eClErCuC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB","file":"static/js/main.03b7a3bf.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({filter, handleFilter}) => {\n\n  return(\n    <div>\n      filter shown with: \n      <input \n        value={filter}\n        onChange={handleFilter}\n      />\n    </div>\n  );\n};\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n      <div>\n        name: \n        <input \n          value={props.newName}\n          onChange={props.handleNameChange}\n        />\n      </div>\n      <div>\n        number: \n        <input \n          value={props.newNumber}\n          onChange={props.handleNumberChange}\n        />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;","import React from 'react';\n\nconst Persons = ({persons, filter, deletePerson}) => {\n\n  const filterByName = persons.filter(person => {\n    return person.name.toLowerCase().includes(filter.toLowerCase())\n  });\n\n  return filterByName.map(person => {\n    return (\n      <div key={person.id}>\n        <p key={person.name}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person)}>delete</button>\n        </p>\n      </div>\n    );\n  });\n};\n\nexport default Persons;","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message.text === null) {\n    return null\n  }\n\n  return (\n    <div className={message.type}>\n      {message.text}\n    </div>\n  )\n}\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = '/api/persons';\n\nconst getAll = () => {\n  return axios.get(baseUrl);\n}\n\nconst create = newObject => {\n  return axios.post(baseUrl, newObject);\n}\n\nconst update = (id, newNumber) => {\n  return axios.put(`${baseUrl}/${id}`, newNumber);\n}\n\nconst deletePerson = id => {\n  return axios.delete(`${baseUrl}/${id}`);\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n  deletePerson\n}\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport Notification from './components/Notification';\nimport personService from './services/persons';\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState({});\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    const existingPerson = persons.find(p => newName === p.name);\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    };\n    if (existingPerson) {\n      if(window.confirm(`${newName} is already added to the phonebook, replace old number with a new one`)){\n        personService\n          .update(existingPerson.id, newPerson)\n          .then(response => {\n            setMessage({\n              type: 'success',\n              text: `Updated ${newPerson.name}`\n            });\n            setTimeout(() => {\n              setMessage({});\n            }, 5000);\n            setPersons(persons.map(p => p.id !== existingPerson.id ? p : response.data))\n            setNewName('');\n            setNewNumber('');\n          });\n      }\n      return;\n    }\n    personService\n      .create(newPerson)\n      .then(response => {\n        setMessage({\n          type: 'success',\n          text: `Added ${newPerson.name}`\n        });\n        setTimeout(() => {\n          setMessage({});\n        }, 5000);\n        setPersons(persons.concat(response.data));\n        setNewName('');\n        setNewNumber('');\n      })\n  };\n\n  const deletePerson = (person) => {\n    if(window.confirm(`Delete ${person.name} ?`)){\n      personService.deletePerson(person.id)\n        .then(response => {\n          setMessage({\n            type: 'success',\n            text: `${person.name} deleted`\n          });\n          setTimeout(() => {\n            setMessage({});\n          }, 5000);\n          setPersons(persons.filter(p => p.id !== person.id));\n        })\n        .catch(error => {\n          setMessage({\n            type: 'error',\n            text: `Intormation of ${person.name} has already been removed from server`\n          });\n          setTimeout(() => {\n            setMessage({})\n          }, 5000)\n          setPersons(persons.filter(p => p.id !== person.id))\n        });\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value);\n  };\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter\n        filter={filter}\n        handleFilter={handleFilter}\n      />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        filter={filter}\n        deletePerson={deletePerson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}